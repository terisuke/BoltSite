---
import { getLocaleFromPathname } from '../../utils/i18n';

const { currentPath } = Astro.props;

const languages = [
  { code: 'ja', name: '日本語', flag: '🇯🇵' },
  { code: 'en', name: 'English', flag: '🇺🇸' },
  { code: 'zh', name: '中文', flag: '🇨🇳' },
  { code: 'es', name: 'Español', flag: '🇪🇸' },
  { code: 'ko', name: '한국어', flag: '🇰🇷' }
];

const currentLocale = getLocaleFromPathname(currentPath || Astro.url.pathname);
const currentLanguage = languages.find(lang => lang.code === currentLocale) || languages[0];

// 一意のIDを生成
const uniqueId = Math.random().toString(36).substring(2, 11);
const switcherId = `language-switcher-${uniqueId}`;
const dropdownId = `language-dropdown-${uniqueId}`;
---

<div class="relative group">
  <button 
    class="flex items-center justify-center gap-2 px-3 py-2 w-full lg:w-auto border border-blue-200 rounded-lg bg-white hover:bg-gray-50 transition-colors duration-200 text-sm font-medium text-gray-700"
    id={switcherId}
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="text-lg">{currentLanguage.flag}</span>
    <span>{currentLanguage.name}</span>
    <svg class="w-4 h-4 transition-transform duration-200 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  
  <div 
    class="absolute top-full left-0 mt-1 w-full lg:w-48 bg-white border border-gray-200 rounded-lg shadow-lg opacity-0 invisible transition-all duration-200 z-50"
    id={dropdownId}
  >
    {languages.map((language) => {
      // 現在のパスから言語プレフィックスを除去
      const pathWithoutLocale = currentPath?.replace(/^\/(en|zh|es|ko)/, '') || '';
      // 新しい言語のURLを生成
      const newPath = language.code === 'ja' ? pathWithoutLocale || '/' : `/${language.code}${pathWithoutLocale || ''}`;
      
      return (
        <a
          href={newPath}
          class={`flex items-center gap-3 px-4 py-3 text-sm hover:bg-gray-50 transition-colors duration-200 first:rounded-t-lg last:rounded-b-lg ${
            language.code === currentLocale ? 'bg-blue-50 text-blue-600' : 'text-gray-700'
          }`}
        >
          <span class="text-lg">{language.flag}</span>
          <span>{language.name}</span>
          {language.code === currentLocale && (
            <svg class="w-4 h-4 ml-auto text-blue-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
            </svg>
          )}
        </a>
      );
    })}
  </div>
</div>

<script is:inline define:vars={{ switcherId, dropdownId }}>
  const switcher = document.getElementById(switcherId);
  const dropdown = document.getElementById(dropdownId);
  
  if (switcher && dropdown) {
    switcher.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const isOpen = dropdown.classList.contains('opacity-100');
      
      if (isOpen) {
        dropdown.classList.remove('opacity-100', 'visible');
        dropdown.classList.add('opacity-0', 'invisible');
        switcher.setAttribute('aria-expanded', 'false');
      } else {
        dropdown.classList.remove('opacity-0', 'invisible');
        dropdown.classList.add('opacity-100', 'visible');
        switcher.setAttribute('aria-expanded', 'true');
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!switcher.contains(e.target) && !dropdown.contains(e.target)) {
        dropdown.classList.remove('opacity-100', 'visible');
        dropdown.classList.add('opacity-0', 'invisible');
        switcher.setAttribute('aria-expanded', 'false');
      }
    });
    
    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        dropdown.classList.remove('opacity-100', 'visible');
        dropdown.classList.add('opacity-0', 'invisible');
        switcher.setAttribute('aria-expanded', 'false');
      }
    });
  }
</script>