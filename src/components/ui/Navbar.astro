---
import { Astronav } from "astro-navbar";
import LanguageSwitcher from "./LanguageSwitcher.astro";
import { loadTranslation, getLocaleFromPathname } from '../../utils/i18n';
import type { NavigationItem } from '../../types';

const { currentPath } = Astro.props;
const locale = getLocaleFromPathname(currentPath || Astro.url.pathname);
const t = await loadTranslation(locale);

// Generate home path based on current locale
const homePath = locale === 'ja' ? '/' : `/${locale}/`;

const menuitems: NavigationItem[] = [
  { href: '#overview', label: t.services.overview },
  { href: '#pricing', label: t.nav.pricing },
  { href: '#features', label: t.nav.features },
  { href: '#performance', label: t.nav.performance },
  { href: '#faq', label: t.nav.faq },
];

---

<div class="mt-20">
  <nav class="w-full top-0 left-0 z-50 fixed bg-white shadow-sm" role="navigation" aria-label="メインナビゲーション">
    <header class="flex flex-col lg:flex-row justify-between items-center my-5 px-6 md:px-32 min-h-[80px]">
      <Astronav>
        <div class="flex w-full lg:w-auto items-center justify-between">
          <a href={homePath} class="flex items-center space-x-3 rtl:space-x-reverse focus-ring rounded-lg" aria-label="BoltSiteホームページに戻る">
            <img src="/logowithtxt.png" class="h-20" alt="BoltSiteロゴ" />
          </a>
          <div class="block lg:hidden">
            <button 
              id="menu-toggle" 
              class="w-8 h-8 text-black cursor-pointer focus-ring rounded p-1" 
              aria-label="メニューを開く"
              aria-expanded="false"
              aria-controls="menu-items"
            >
              <!-- Open (hamburger) icon -->
              <svg id="open-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="w-6 h-6" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
              <!-- Close (X) icon -->
              <svg id="close-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" class="w-6 h-6 hidden" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <nav class="hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0" id="menu-items">
          <ul class="font-medium flex flex-col p-4 lg:p-0 mt-4 border rounded-lg lg:flex-row lg:justify-center lg:items-center lg:gap-10 lg:mt-0 lg:border-0">
            {menuitems.map((item) => (
              <li>
                <a 
                  href={item.href} 
                  class="mobile-nav-link block py-3 px-4 text-black rounded lg:bg-transparent lg:py-3 lg:px-4 lg:whitespace-nowrap lg:text-center text-lg font-semibold"
                  data-close-menu="true"
                >
                  {item.label}
                </a>
              </li>
            ))}
            <div class="lg:hidden flex flex-col items-center justify-center mt-3 gap-4 px-4">
              <div class="w-full max-w-sm">
                <LanguageSwitcher currentPath={currentPath} />
              </div>
            </div>
          </ul>
        </nav>
      </Astronav>

      <div class="flex-shrink-0">
        <div class="hidden lg:flex items-center gap-4">
          <LanguageSwitcher currentPath={currentPath} />
        </div>
      </div>
    </header>
  </nav>
</div>

<script is:inline>
  // DOMContentLoadedイベントで実行
  document.addEventListener('DOMContentLoaded', function() {
    // Get references to the menu icon, open/close icons, and menu items
    const menuToggle = document.getElementById('menu-toggle');
    const openIcon = document.getElementById('open-icon');
    const closeIcon = document.getElementById('close-icon');
    const menuItems = document.getElementById('menu-items');
    const closeMenuItems = document.querySelectorAll('[data-close-menu="true"]');

    // 要素が存在するかチェック
    if (!menuToggle || !openIcon || !closeIcon || !menuItems) {
      console.warn('Menu elements not found');
      return;
    }

    // Toggle the menu visibility and icon when the menu toggle is clicked
    menuToggle.addEventListener('click', () => {
      const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';
      
      // Toggle the menu visibility
      menuItems.classList.toggle('hidden');
      
      // Toggle between open and close icons
      openIcon.classList.toggle('hidden');
      closeIcon.classList.toggle('hidden');
      
      // Update aria-expanded attribute
      menuToggle.setAttribute('aria-expanded', !isExpanded);
    });

    // Close the menu when any item is clicked
    closeMenuItems.forEach(item => {
      item.addEventListener('click', () => {
        menuItems.classList.add('hidden');
        openIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
        menuToggle.setAttribute('aria-expanded', 'false');
      });
    });
  });
</script>